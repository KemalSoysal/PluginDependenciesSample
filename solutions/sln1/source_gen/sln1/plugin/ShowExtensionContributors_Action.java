package sln1.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.structure.ExtensionPoint;

public class ShowExtensionContributors_Action extends BaseAction {
  private static final Logger LOG = LogManager.getLogger(ShowExtensionContributors_Action.class);
  private static final Icon ICON = null;

  public ShowExtensionContributors_Action() {
    super("Show Extension Contributions", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    int size = Sequence.fromIterable(ShowExtensionContributors_Action.this.getContributions(event)).count();
    event.getPresentation().setText(String.format("Show Extension Contributions [%d]", size));
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    Iterable<String> contributions = ShowExtensionContributors_Action.this.getContributions(event);
    if (Sequence.fromIterable(contributions).count() == 0) {
      LoggingRuntime.logMsgView(Level.INFO, "no contributions", ShowExtensionContributors_Action.class, null, null);
    }
    Sequence.fromIterable(contributions).visitAll(new IVisitor<String>() {
      public void visit(String contribution) {
        LoggingRuntime.logMsgView(Level.INFO, String.format("%s", contribution), ShowExtensionContributors_Action.class, null, null);
      }
    });
  }
  private Iterable<String> getContributions(final AnActionEvent event) {
    return new ExtensionPoint<String>("sln1.Sln1.Extension").getObjects();
  }
}
